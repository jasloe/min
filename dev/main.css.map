{"version":3,"sources":["webpack:///<no source>","webpack:///./src/scss/utilities/_reset.scss","webpack:///main.scss","webpack:///./src/scss/utilities/_typography.scss","webpack:///./src/scss/base/_all.scss","webpack:///./src/scss/navigation/_menus.scss","webpack:///./src/scss/utilities/_mixins.scss","webpack:///./src/scss/utilities/_colors.scss","webpack:///./node_modules/rfs/scss.scss","webpack:///./src/components/artwork/artwork.scss"],"names":[],"mappings":"AAAA;EAAA;EAAA;EAAA;EAAA;CAAA;AAAA;EAAA;EAAA;EAAA;EAAA;CAAA;ACAA;;;CAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE;EACA;EACA;EACA;EACA;EACA;ACAF;ADGA;AACA;;;;;;;;;;;EAWE;ACAF;ADGA;;;EAGE;ACAF;ADGA;;EAEE;ACAF;ADGA;;;;EAIE;EACA;ACAF;ADGA;EACE;EACA;ACAF;ADIA;;;;;EAKE;EACA;EACA;EACA;ACDF;ADIA;;EAEE;ACDF;ADIA;;EAEE;ACDF;ADIA;;;;EAIE;ACDF;AC9IA;;EAEE,yBAfM;EAgBN;ADiJF;AEpKA;EACE;AFuKF;AEpKA;EACE,yBDFM;ECGN;AFuKF;AGzKA;EACE;EACA;EAAA;EACA;EAAA;UAAA;EACA;UAAA;EACA;UAAA;AH4KF;AGzKA;ECNE;EACA,cCWM;EDSN,yCHtBK;EK+OD,iBALI;EFlNR;EACA;AJgKF;AOxHA;EACE;EACA;EACA;EAAA;EACA;EAAA;UAAA;EACA;UAAA;EACA;AP2HF;AOxHA;EACE;EACA;AP2HF,C","file":"main.css","sourcesContent":[null,"/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nol,\nul,\nli {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: \"\";\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n// Button reset borrowed from Normalize.css\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  background: none;\n  font-size: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n","/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nol,\nul,\nli {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: \"\";\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  background: none;\n  font-size: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n}\n\nh1,\nh2 {\n  font-family: Cardo, serif;\n  color: #1b1442;\n}\n\nhtml {\n  font-size: 16px;\n}\n\nbody {\n  font-family: Cardo, serif;\n  text-rendering: optimizeLegibility;\n}\n\n.region__header {\n  margin: 1rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\n.region__header a {\n  text-decoration: none;\n  color: #000000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n  text-transform: uppercase;\n  letter-spacing: 0.05rem;\n}\n\n.artwork__wrapper {\n  height: 100vh;\n  border: 1px solid gray;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding: 0 3rem;\n}\n\nimg {\n  height: 100%;\n  width: 100%;\n}","@import \"~rfs/scss\";\n\n// type\n$serif: Cardo, serif;\n$serif-italic: \"Cardo Italic\";\n$sans: Arial, Helvetica, sans-serif;\n\n$font-default: $serif;\n$font-body: $serif;\n$font-display: $serif;\n$font-caption: $sans;\n\n$font-small: 0.8rem;\n$font-medium: 1.5rem;\n$font-large: 2rem;\n\nh1,\nh2 {\n  font-family: $font-display;\n  color: $color-default;\n}\n","html {\n  font-size: 16px;\n}\n\nbody {\n  font-family: $font-default;\n  text-rendering: optimizeLegibility;\n}\n","// .main-menu a {\n//   @include links;\n// }\n\n.region__header {\n  margin: 1rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\n.region__header a {\n  @include links;\n  @include smallCaps;\n}\n","@mixin flex($direction) {\n  display: flex;\n  flex-direction: $direction;\n}\n\n@mixin links {\n  text-decoration: none;\n  color: $black;\n}\n\n@mixin serif {\n  font-family: \"Lora\";\n\n  em {\n    font-family: \"Lora Italic\";\n  }\n}\n\n@mixin test {\n  display: none;\n}\n\n@mixin smallText {\n  font-family: $caption;\n}\n\n@mixin smallCaps {\n  font-family: $font-caption;\n  @include font-size($font-small);\n  text-transform: uppercase;\n  letter-spacing: 0.05rem;\n}\n","// https://www.sitepoint.com/dealing-color-schemes-sass/\n\n@mixin theme($name, $color) {\n  // Define colors in your theme\n  $primary: $color;\n  $secondary: lighten(adjust-hue($color, 20), 10%);\n  // Add your classes with css colors added\n  .#{$name} {\n    .element {\n      color: $primary;\n    }\n    .other-element {\n      background: $secondary;\n    }\n  }\n}\n\n// colors\n$black: #000000;\n$blue-black: #1b1442;\n$gray-1: #f4f4f9;\n$gray-8: #33424d;\n$gray-9: #1c2d39;\n$gray-10: #05121c;\n$white: #ffffff;\n\n$themekey: green;\n\n$color-default: $blue-black;\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{$value-min / $rfs-rem-value}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","// contains style sheet for artwork nodes\nheader,\n.exhibition-marquee {\n  // display: none;\n}\n\n// .exhibition__artwork {\n// }\n\n// @include mq($from: tablet) {\n//   .artwork__wrapper {\n//     height: 100vh;\n//     position: relative;\n//     display: flex;\n//     flex-direction: row;\n//     background: red;\n//     justify-content: center;\n//     align-items: center;\n//   }\n// }\n\n// .artwork__wrapper {\n//   height: 100vh;\n//   border: 1px solid green;\n// }\n\n// .artwork-image__inner,\n// .artwork-metadata {\n//   flex-basis: 50%;\n//   border: 1px solid white;\n// }\n\n// .artwork-metadata {\n//   margin-left: 3rem;\n// }\n\n// .artwork-image {\n//   text-align: center;\n//   line-height: 0;\n//   background: white;\n// }\n\n// img {\n//   height: 100%;\n//   width: 100%;\n// }\n\n// .artwork-image {\n//   line-height: 0;\n//   width: 100%;\n//   padding-bottom: 121.3%; /* 9/16 = aspect ratio of image */\n//   position: relative;\n// }\n\n// img {\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   width: 100%;\n//   height: auto;\n//   max-height: 100%;\n//   line-height: 0;\n// }\n\n// .artwork__wrapper {\n//   position: relative;\n//   .artwork-metadata {\n//   }\n// }\n\n.artwork__wrapper {\n  height: 100vh;\n  border: 1px solid gray;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding: 0 3rem;\n}\n\nimg {\n  height: 100%;\n  width: 100%;\n}\n"],"sourceRoot":""}